"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_version = '0.0.1';

// http://jsfiddle.net/kYvzd/118/?utm_source=website&utm_medium=embed&utm_campaign=kYvzd

// continue button
var imgContinue = new Image(205, 61);
imgContinue.src = pathPrefix + "/gamb/imgs/Continue_button.png";
var global_gamb_config = [[[[0.25, 110, 75], [0.60, 20, 125]], [[0.75, 50, 150], [0.30, 70, 30]], [[0.40, 120, 90], [0.60, 70, 165]], [[0.65, 115, 125], [0.70, 130, 175]], [[0.30, 195, 15], [0.60, 155, 160]], [[0.40, 145, 140], [0.60, 20, 120]], [[0.25, 80, 10], [0.50, 55, 30]], [[0.60, 90, 20], [0.35, 150, 180]], [[0.55, 155, 180], [0.50, 195, 60]], [[0.45, 95, 35], [0.50, 165, 140]], [[0.45, 55, 45], [0.70, 25, 30]], [[0.40, 125, 105], [0.70, 35, 115]], [[0.75, 65, 195], [0.60, 80, 120]], [[0.75, 65, 140], [0.25, 100, 15]], [[0.30, 155, 55], [0.50, 90, 95]], [[0.50, 50, 175], [0.65, 175, 170]], [[0.65, 100, 135], [0.25, 110, 150]], [[0.45, 100, 70], [0.50, 65, 25]], [[0.65, 55, 100], [0.25, 65, 30]], [[0.45, 125, 85], [0.60, 80, 135]]], [[[0.55, 195, 130], [0.70, 95, 10]], [[0.75, 80, 150], [0.40, 30, 15]], [[0.65, 60, 40], [0.35, 35, 60]], [[0.45, 45, 95], [0.55, 30, 65]], [[0.75, 25, 120], [0.35, 135, 90]], [[0.75, 120, 175], [0.70, 130, 170]], [[0.60, 70, 95], [0.75, 30, 20]], [[0.70, 150, 185], [0.50, 30, 180]], [[0.70, 130, 20], [0.55, 85, 50]], [[0.75, 55, 190], [0.65, 30, 55]], [[0.60, 90, 135], [0.75, 35, 105]], [[0.35, 60, 105], [0.40, 25, 80]], [[0.25, 105, 35], [0.75, 45, 135]], [[0.45, 185, 130], [0.55, 35, 60]], [[0.70, 85, 145], [0.65, 80, 115]], [[0.70, 75, 140], [0.50, 85, 25]], [[0.45, 140, 110], [0.70, 60, 135]], [[0.40, 40, 195], [0.70, 175, 50]], [[0.75, 60, 200], [0.30, 35, 10]], [[0.50, 70, 110], [0.35, 45, 55]]], [[[0.30, 120, 15], [0.50, 55, 115]], [[0.25, 75, 35], [0.45, 85, 55]], [[0.70, 70, 120], [0.45, 120, 50]], [[0.50, 150, 110], [0.40, 185, 90]], [[0.30, 80, 30], [0.45, 15, 20]], [[0.70, 170, 55], [0.35, 125, 200]], [[0.60, 140, 200], [0.75, 55, 80]], [[0.55, 115, 90], [0.30, 70, 165]], [[0.35, 60, 65], [0.65, 100, 195]], [[0.50, 170, 65], [0.70, 120, 125]], [[0.60, 40, 60], [0.50, 45, 65]], [[0.40, 165, 110], [0.60, 120, 180]], [[0.70, 150, 35], [0.75, 160, 95]], [[0.65, 10, 190], [0.35, 35, 95]], [[0.60, 85, 55], [0.65, 40, 150]], [[0.65, 75, 125], [0.35, 190, 65]], [[0.75, 65, 195], [0.60, 80, 120]], [[0.65, 60, 65], [0.45, 85, 40]], [[0.30, 65, 145], [0.25, 170, 140]], [[0.40, 30, 110], [0.65, 25, 180]]], [[[0.70, 20, 195], [0.60, 55, 170]], [[0.60, 40, 60], [0.75, 65, 195]], [[0.35, 195, 105], [0.40, 60, 40]], [[0.30, 190, 105], [0.40, 10, 25]], [[0.35, 150, 100], [0.50, 65, 90]], [[0.65, 60, 55], [0.35, 75, 10]], [[0.35, 195, 100], [0.60, 105, 145]], [[0.45, 135, 105], [0.65, 95, 140]], [[0.50, 160, 190], [0.55, 45, 55]], [[0.35, 115, 100], [0.40, 105, 90]], [[0.75, 115, 45], [0.55, 25, 110]], [[0.60, 30, 115], [0.50, 95, 145]], [[0.55, 155, 80], [0.45, 185, 70]], [[0.75, 95, 90], [0.40, 145, 115]], [[0.35, 55, 140], [0.70, 20, 105]], [[0.55, 135, 110], [0.40, 145, 60]], [[0.25, 75, 170], [0.75, 165, 25]], [[0.35, 95, 155], [0.30, 70, 100]], [[0.75, 45, 85], [0.60, 55, 40]], [[0.40, 80, 30], [0.75, 35, 50]]], [[[0.25, 140, 15], [0.50, 195, 110]], [[0.25, 30, 140], [0.35, 75, 175]], [[0.40, 75, 50], [0.45, 165, 135]], [[0.55, 170, 185], [0.65, 35, 180]], [[0.40, 185, 85], [0.45, 80, 40]], [[0.70, 145, 165], [0.75, 95, 80]], [[0.45, 145, 90], [0.75, 10, 20]], [[0.60, 155, 140], [0.35, 180, 55]], [[0.60, 25, 60], [0.40, 135, 120]], [[0.75, 185, 150], [0.45, 195, 200]], [[0.60, 10, 75], [0.30, 170, 30]], [[0.40, 25, 40], [0.60, 35, 115]], [[0.45, 95, 40], [0.70, 30, 50]], [[0.75, 50, 150], [0.40, 165, 110]], [[0.60, 10, 35], [0.35, 95, 90]], [[0.30, 175, 90], [0.65, 10, 85]], [[0.25, 15, 10], [0.75, 55, 180]], [[0.25, 190, 40], [0.45, 30, 15]], [[0.30, 20, 190], [0.65, 145, 105]], [[0.35, 105, 55], [0.45, 100, 80]]], [[[0.50, 120, 135], [0.30, 70, 45]], [[0.25, 10, 95], [0.35, 105, 190]], [[0.35, 180, 105], [0.75, 10, 50]], [[0.40, 180, 120], [0.35, 65, 35]], [[0.25, 165, 155], [0.75, 100, 165]], [[0.40, 120, 185], [0.60, 45, 195]], [[0.65, 70, 95], [0.50, 160, 130]], [[0.75, 35, 25], [0.45, 70, 45]], [[0.50, 25, 35], [0.35, 105, 60]], [[0.30, 170, 55], [0.70, 80, 180]], [[0.75, 55, 110], [0.35, 95, 30]], [[0.35, 145, 185], [0.75, 140, 120]], [[0.45, 185, 145], [0.55, 125, 150]], [[0.60, 70, 105], [0.75, 55, 165]], [[0.55, 50, 15], [0.60, 85, 40]], [[0.40, 195, 155], [0.55, 55, 135]], [[0.70, 160, 150], [0.25, 90, 80]], [[0.25, 180, 40], [0.50, 140, 110]], [[0.30, 70, 180], [0.60, 200, 175]], [[0.40, 185, 95], [0.50, 35, 25]]], [[[0.35, 80, 15], [0.75, 155, 110]], [[0.40, 105, 200], [0.50, 110, 75]], [[0.35, 195, 110], [0.30, 165, 75]], [[0.40, 35, 160], [0.55, 20, 190]], [[0.30, 145, 35], [0.65, 110, 150]], [[0.35, 105, 35], [0.60, 50, 40]], [[0.30, 75, 60], [0.60, 25, 45]], [[0.25, 140, 55], [0.70, 30, 100]], [[0.40, 100, 65], [0.65, 30, 100]], [[0.30, 85, 40], [0.55, 75, 125]], [[0.65, 185, 125], [0.50, 85, 130]], [[0.55, 160, 170], [0.45, 155, 100]], [[0.30, 160, 60], [0.35, 140, 145]], [[0.70, 60, 100], [0.30, 75, 40]], [[0.65, 70, 130], [0.25, 120, 40]], [[0.45, 90, 10], [0.65, 135, 105]], [[0.65, 35, 15], [0.55, 105, 120]], [[0.75, 65, 195], [0.60, 60, 90]], [[0.50, 155, 145], [0.55, 105, 110]], [[0.55, 95, 25], [0.60, 90, 60]]], [[[0.55, 85, 30], [0.35, 135, 185]], [[0.55, 200, 10], [0.75, 185, 195]], [[0.35, 45, 30], [0.50, 165, 140]], [[0.75, 15, 45], [0.40, 105, 70]], [[0.70, 175, 185], [0.35, 185, 10]], [[0.40, 100, 20], [0.75, 65, 25]], [[0.65, 180, 10], [0.45, 60, 175]], [[0.40, 30, 20], [0.30, 175, 75]], [[0.35, 60, 15], [0.75, 30, 45]], [[0.35, 170, 75], [0.75, 40, 100]], [[0.75, 35, 95], [0.35, 145, 195]], [[0.60, 160, 110], [0.40, 145, 40]], [[0.50, 90, 100], [0.70, 65, 180]], [[0.60, 80, 145], [0.55, 130, 155]], [[0.75, 35, 190], [0.35, 130, 95]], [[0.25, 160, 65], [0.35, 55, 70]], [[0.35, 130, 45], [0.75, 30, 25]], [[0.55, 95, 20], [0.25, 155, 145]], [[0.50, 150, 165], [0.60, 115, 200]], [[0.70, 45, 65], [0.75, 50, 125]]], [[[0.50, 200, 195], [0.25, 55, 15]], [[0.40, 150, 125], [0.50, 70, 100]], [[0.60, 95, 25], [0.45, 190, 80]], [[0.65, 25, 35], [0.75, 160, 110]], [[0.55, 95, 45], [0.65, 100, 50]], [[0.60, 95, 165], [0.30, 30, 25]], [[0.35, 10, 145], [0.65, 115, 120]], [[0.70, 85, 50], [0.75, 25, 120]], [[0.40, 150, 100], [0.25, 120, 40]], [[0.45, 90, 100], [0.30, 185, 75]], [[0.40, 200, 155], [0.35, 70, 35]], [[0.60, 120, 190], [0.55, 135, 145]], [[0.35, 50, 75], [0.40, 150, 130]], [[0.40, 75, 70], [0.65, 10, 65]], [[0.55, 165, 200], [0.30, 185, 75]], [[0.40, 95, 80], [0.30, 160, 105]], [[0.75, 60, 185], [0.25, 140, 45]], [[0.25, 50, 10], [0.50, 65, 25]], [[0.35, 130, 50], [0.30, 195, 65]], [[0.65, 85, 170], [0.55, 135, 55]]], [[[0.30, 95, 30], [0.50, 130, 120]], [[0.70, 85, 140], [0.50, 155, 110]], [[0.35, 160, 35], [0.25, 200, 20]], [[0.40, 30, 10], [0.60, 80, 95]], [[0.65, 150, 180], [0.35, 195, 55]], [[0.55, 80, 175], [0.40, 95, 10]], [[0.50, 85, 155], [0.65, 30, 125]], [[0.50, 125, 155], [0.30, 90, 60]], [[0.35, 130, 75], [0.40, 45, 10]], [[0.70, 180, 155], [0.25, 100, 165]], [[0.60, 190, 65], [0.65, 185, 105]], [[0.60, 90, 125], [0.50, 125, 135]], [[0.25, 65, 115], [0.60, 70, 65]], [[0.65, 115, 65], [0.45, 110, 25]], [[0.50, 155, 180], [0.45, 15, 35]], [[0.50, 130, 100], [0.35, 175, 75]], [[0.55, 105, 155], [0.25, 155, 85]], [[0.40, 90, 60], [0.60, 80, 120]], [[0.25, 135, 45], [0.40, 120, 80]], [[0.65, 150, 80], [0.35, 185, 155]]], [[[0.45, 180, 115], [0.65, 75, 110]], [[0.75, 200, 95], [0.25, 185, 85]], [[0.60, 130, 20], [0.45, 140, 10]], [[0.75, 35, 105], [0.30, 140, 60]], [[0.30, 85, 40], [0.55, 35, 75]], [[0.25, 135, 45], [0.40, 60, 40]], [[0.65, 190, 105], [0.50, 145, 110]], [[0.60, 50, 190], [0.65, 150, 85]], [[0.70, 100, 160], [0.60, 75, 85]], [[0.35, 25, 65], [0.45, 195, 40]], [[0.55, 80, 35], [0.45, 155, 60]], [[0.70, 70, 170], [0.30, 105, 50]], [[0.40, 130, 85], [0.25, 135, 40]], [[0.25, 115, 55], [0.50, 25, 50]], [[0.65, 60, 160], [0.60, 45, 110]], [[0.70, 20, 130], [0.45, 95, 90]], [[0.45, 20, 100], [0.35, 165, 145]], [[0.75, 20, 90], [0.65, 85, 125]], [[0.45, 85, 125], [0.65, 25, 80]], [[0.35, 25, 35], [0.70, 55, 110]]], [[[0.65, 70, 175], [0.40, 50, 60]], [[0.40, 60, 40], [0.25, 90, 30]], [[0.35, 105, 55], [0.65, 85, 155]], [[0.70, 10, 40], [0.60, 45, 75]], [[0.50, 70, 190], [0.70, 35, 75]], [[0.35, 160, 70], [0.70, 110, 25]], [[0.55, 120, 185], [0.30, 150, 85]], [[0.60, 30, 25], [0.35, 60, 20]], [[0.40, 145, 170], [0.65, 10, 180]], [[0.55, 55, 90], [0.35, 70, 25]], [[0.75, 55, 80], [0.45, 140, 70]], [[0.65, 50, 55], [0.35, 95, 10]], [[0.40, 150, 125], [0.55, 50, 80]], [[0.75, 65, 95], [0.60, 30, 25]], [[0.40, 125, 120], [0.45, 75, 85]], [[0.70, 190, 100], [0.60, 100, 85]], [[0.65, 70, 190], [0.70, 165, 160]], [[0.75, 60, 180], [0.40, 135, 90]], [[0.65, 65, 115], [0.70, 75, 175]], [[0.55, 75, 65], [0.70, 80, 140]]], [[[0.45, 95, 110], [0.60, 100, 155]], [[0.75, 15, 185], [0.30, 65, 200]], [[0.45, 30, 10], [0.70, 80, 200]], [[0.35, 30, 60], [0.55, 80, 120]], [[0.60, 115, 90], [0.40, 195, 75]], [[0.65, 95, 115], [0.75, 40, 80]], [[0.35, 25, 55], [0.50, 50, 70]], [[0.60, 125, 185], [0.40, 30, 20]], [[0.55, 160, 120], [0.35, 185, 50]], [[0.45, 70, 80], [0.60, 25, 35]], [[0.30, 60, 180], [0.75, 75, 200]], [[0.65, 180, 40], [0.60, 95, 45]], [[0.50, 65, 175], [0.55, 190, 120]], [[0.30, 145, 95], [0.45, 115, 125]], [[0.25, 115, 25], [0.50, 80, 75]], [[0.50, 45, 20], [0.40, 80, 10]], [[0.40, 105, 70], [0.25, 135, 45]], [[0.60, 130, 145], [0.50, 145, 105]], [[0.45, 165, 135], [0.30, 175, 75]], [[0.65, 145, 155], [0.75, 85, 20]]], [[[0.50, 145, 125], [0.75, 150, 195]], [[0.65, 30, 25], [0.60, 40, 80]], [[0.75, 35, 115], [0.35, 160, 65]], [[0.50, 55, 85], [0.25, 180, 80]], [[0.35, 55, 65], [0.45, 90, 80]], [[0.65, 35, 65], [0.40, 195, 130]], [[0.40, 105, 70], [0.60, 30, 45]], [[0.50, 10, 40], [0.30, 90, 60]], [[0.25, 15, 75], [0.75, 185, 130]], [[0.70, 40, 65], [0.50, 85, 105]], [[0.55, 10, 30], [0.30, 190, 70]], [[0.60, 185, 125], [0.25, 75, 110]], [[0.35, 150, 50], [0.70, 85, 65]], [[0.75, 45, 185], [0.40, 155, 130]], [[0.45, 145, 75], [0.50, 85, 35]], [[0.65, 55, 165], [0.35, 60, 40]], [[0.45, 180, 170], [0.65, 55, 140]], [[0.65, 25, 35], [0.30, 120, 40]], [[0.60, 200, 25], [0.45, 40, 90]], [[0.55, 200, 75], [0.60, 150, 10]]], [[[0.40, 75, 40], [0.30, 160, 60]], [[0.40, 105, 70], [0.75, 25, 75]], [[0.50, 90, 155], [0.75, 20, 115]], [[0.55, 130, 120], [0.70, 60, 130]], [[0.25, 95, 55], [0.45, 45, 60]], [[0.65, 110, 155], [0.75, 30, 25]], [[0.45, 70, 30], [0.50, 55, 200]], [[0.45, 145, 80], [0.65, 70, 30]], [[0.40, 15, 10], [0.75, 50, 150]], [[0.40, 200, 60], [0.30, 65, 70]], [[0.60, 130, 145], [0.30, 125, 25]], [[0.35, 195, 75], [0.50, 50, 15]], [[0.30, 70, 40], [0.50, 105, 155]], [[0.60, 10, 65], [0.40, 140, 145]], [[0.50, 150, 105], [0.30, 120, 150]], [[0.65, 30, 15], [0.50, 10, 165]], [[0.25, 150, 25], [0.55, 55, 45]], [[0.50, 190, 175], [0.65, 90, 170]], [[0.25, 105, 10], [0.50, 100, 90]], [[0.65, 105, 200], [0.45, 135, 130]]], [[[0.50, 150, 135], [0.25, 195, 80]], [[0.50, 135, 95], [0.30, 125, 25]], [[0.50, 130, 95], [0.55, 60, 45]], [[0.50, 45, 185], [0.65, 175, 25]], [[0.35, 15, 160], [0.70, 120, 165]], [[0.30, 190, 105], [0.25, 105, 75]], [[0.40, 165, 110], [0.60, 90, 135]], [[0.30, 145, 105], [0.35, 45, 85]], [[0.55, 125, 175], [0.70, 90, 65]], [[0.25, 165, 40], [0.45, 170, 120]], [[0.45, 80, 180], [0.40, 110, 190]], [[0.35, 120, 130], [0.30, 130, 110]], [[0.60, 120, 145], [0.30, 20, 15]], [[0.75, 10, 170], [0.70, 80, 55]], [[0.40, 165, 80], [0.75, 40, 70]], [[0.70, 25, 125], [0.30, 135, 75]], [[0.35, 195, 105], [0.40, 165, 110]], [[0.45, 120, 15], [0.70, 155, 185]], [[0.60, 80, 125], [0.45, 75, 65]], [[0.45, 135, 70], [0.55, 150, 170]]], [[[0.40, 45, 50], [0.65, 80, 145]], [[0.25, 120, 40], [0.60, 20, 30]], [[0.50, 105, 90], [0.35, 140, 35]], [[0.55, 140, 175], [0.60, 25, 40]], [[0.40, 25, 10], [0.60, 30, 35]], [[0.35, 110, 20], [0.65, 30, 15]], [[0.70, 110, 45], [0.35, 135, 70]], [[0.75, 45, 55], [0.60, 110, 115]], [[0.60, 35, 100], [0.25, 165, 195]], [[0.50, 175, 170], [0.35, 65, 50]], [[0.75, 75, 145], [0.35, 185, 60]], [[0.30, 70, 30], [0.45, 165, 135]], [[0.45, 105, 170], [0.50, 85, 65]], [[0.40, 195, 110], [0.65, 50, 15]], [[0.25, 130, 170], [0.30, 115, 160]], [[0.45, 85, 115], [0.30, 80, 70]], [[0.30, 135, 35], [0.50, 105, 75]], [[0.60, 70, 75], [0.25, 110, 135]], [[0.55, 55, 50], [0.40, 125, 80]], [[0.40, 115, 55], [0.65, 75, 135]]], [[[0.55, 60, 65], [0.30, 175, 60]], [[0.60, 90, 185], [0.70, 20, 55]], [[0.50, 30, 40], [0.75, 35, 100]], [[0.60, 105, 165], [0.45, 200, 155]], [[0.45, 115, 65], [0.60, 140, 170]], [[0.30, 140, 55], [0.60, 15, 60]], [[0.35, 140, 15], [0.50, 125, 10]], [[0.75, 135, 170], [0.30, 40, 30]], [[0.25, 120, 105], [0.55, 110, 25]], [[0.60, 15, 60], [0.50, 80, 110]], [[0.25, 120, 40], [0.60, 70, 105]], [[0.60, 35, 90], [0.50, 70, 130]], [[0.35, 145, 10], [0.60, 170, 165]], [[0.65, 85, 125], [0.55, 180, 190]], [[0.25, 195, 65], [0.75, 15, 45]], [[0.25, 35, 70], [0.30, 90, 115]], [[0.55, 115, 140], [0.70, 55, 170]], [[0.35, 105, 140], [0.40, 160, 50]], [[0.55, 180, 45], [0.70, 95, 10]], [[0.65, 115, 10], [0.25, 120, 105]]], [[[0.45, 115, 140], [0.30, 65, 70]], [[0.70, 120, 145], [0.65, 115, 90]], [[0.60, 145, 70], [0.50, 95, 135]], [[0.35, 165, 85], [0.30, 45, 30]], [[0.50, 150, 125], [0.55, 100, 70]], [[0.30, 200, 110], [0.45, 135, 150]], [[0.55, 15, 175], [0.45, 200, 95]], [[0.45, 185, 145], [0.70, 90, 185]], [[0.75, 90, 190], [0.70, 60, 115]], [[0.60, 130, 160], [0.25, 95, 35]], [[0.75, 80, 45], [0.50, 195, 90]], [[0.55, 25, 60], [0.45, 105, 125]], [[0.60, 25, 55], [0.75, 55, 180]], [[0.75, 45, 135], [0.25, 195, 65]], [[0.30, 200, 10], [0.75, 75, 40]], [[0.40, 165, 70], [0.65, 45, 15]], [[0.70, 10, 65], [0.45, 55, 200]], [[0.50, 190, 150], [0.40, 140, 60]], [[0.25, 100, 145], [0.45, 130, 25]], [[0.35, 130, 70], [0.65, 105, 195]]], [[[0.65, 40, 60], [0.45, 175, 110]], [[0.25, 65, 10], [0.60, 110, 140]], [[0.40, 120, 30], [0.60, 125, 160]], [[0.60, 30, 45], [0.50, 115, 140]], [[0.50, 105, 25], [0.30, 130, 90]], [[0.60, 115, 165], [0.25, 120, 45]], [[0.30, 85, 120], [0.50, 110, 50]], [[0.40, 145, 125], [0.60, 25, 80]], [[0.55, 35, 145], [0.60, 180, 100]], [[0.30, 130, 125], [0.45, 145, 200]], [[0.65, 160, 90], [0.70, 115, 75]], [[0.60, 30, 45], [0.75, 25, 75]], [[0.70, 80, 65], [0.50, 185, 75]], [[0.50, 65, 20], [0.35, 135, 55]], [[0.30, 75, 85], [0.65, 15, 185]], [[0.65, 55, 145], [0.60, 45, 105]], [[0.25, 175, 75], [0.75, 10, 15]], [[0.50, 105, 80], [0.75, 175, 70]], [[0.30, 160, 75], [0.50, 125, 95]], [[0.60, 70, 105], [0.30, 175, 75]]], [[[0.55, 25, 10], [0.30, 115, 55]], [[0.70, 80, 185], [0.35, 40, 125]], [[0.30, 80, 200], [0.35, 10, 165]], [[0.50, 70, 90], [0.40, 95, 50]], [[0.50, 20, 85], [0.35, 155, 140]], [[0.75, 170, 120], [0.65, 55, 30]], [[0.40, 30, 20], [0.60, 20, 30]], [[0.30, 45, 50], [0.50, 110, 125]], [[0.60, 100, 95], [0.50, 55, 30]], [[0.50, 100, 75], [0.75, 35, 55]], [[0.60, 50, 75], [0.75, 30, 90]], [[0.70, 85, 165], [0.60, 50, 80]], [[0.25, 90, 155], [0.65, 155, 80]], [[0.55, 155, 145], [0.50, 135, 95]], [[0.30, 75, 20], [0.55, 185, 165]], [[0.60, 50, 200], [0.70, 35, 60]], [[0.25, 115, 35], [0.65, 25, 50]], [[0.75, 90, 190], [0.25, 70, 20]], [[0.55, 110, 130], [0.50, 85, 75]], [[0.65, 25, 155], [0.40, 165, 160]]], [[[0.75, 35, 105], [0.40, 15, 10]], [[0.55, 140, 155], [0.45, 185, 125]], [[0.55, 115, 190], [0.45, 120, 105]], [[0.40, 75, 50], [0.30, 140, 60]], [[0.65, 45, 75], [0.35, 120, 60]], [[0.75, 105, 40], [0.25, 120, 55]], [[0.25, 150, 70], [0.40, 120, 90]], [[0.35, 75, 70], [0.50, 45, 75]], [[0.25, 45, 20], [0.55, 100, 160]], [[0.50, 110, 70], [0.75, 70, 130]], [[0.35, 120, 65], [0.70, 60, 140]], [[0.30, 95, 25], [0.35, 110, 70]], [[0.65, 105, 80], [0.50, 120, 55]], [[0.70, 90, 160], [0.65, 60, 85]], [[0.35, 170, 165], [0.30, 25, 90]], [[0.75, 105, 85], [0.40, 165, 15]], [[0.75, 65, 170], [0.50, 75, 80]], [[0.25, 105, 130], [0.40, 125, 35]], [[0.75, 45, 155], [0.55, 180, 105]], [[0.30, 25, 165], [0.70, 155, 80]]], [[[0.75, 50, 180], [0.55, 85, 130]], [[0.35, 195, 105], [0.30, 175, 75]], [[0.50, 45, 105], [0.55, 90, 135]], [[0.60, 125, 130], [0.55, 40, 10]], [[0.40, 50, 60], [0.60, 40, 100]], [[0.30, 100, 40], [0.55, 170, 10]], [[0.70, 60, 65], [0.55, 35, 25]], [[0.45, 170, 140], [0.40, 195, 110]], [[0.75, 20, 50], [0.60, 45, 80]], [[0.70, 170, 55], [0.60, 30, 40]], [[0.40, 125, 100], [0.50, 110, 145]], [[0.75, 95, 185], [0.50, 105, 75]], [[0.25, 140, 20], [0.55, 155, 145]], [[0.25, 135, 45], [0.45, 165, 135]], [[0.75, 185, 105], [0.45, 165, 155]], [[0.25, 85, 35], [0.30, 165, 200]], [[0.60, 30, 55], [0.50, 25, 40]], [[0.40, 130, 125], [0.60, 105, 175]], [[0.60, 60, 90], [0.55, 80, 70]], [[0.65, 60, 85], [0.55, 150, 185]]], [[[0.70, 70, 140], [0.35, 150, 60]], [[0.40, 70, 65], [0.60, 30, 85]], [[0.75, 60, 195], [0.50, 155, 160]], [[0.40, 140, 75], [0.75, 25, 20]], [[0.50, 95, 145], [0.40, 30, 65]], [[0.50, 95, 195], [0.35, 75, 145]], [[0.70, 30, 75], [0.60, 50, 35]], [[0.25, 160, 55], [0.60, 35, 60]], [[0.35, 185, 115], [0.30, 60, 40]], [[0.75, 50, 140], [0.60, 180, 100]], [[0.55, 140, 115], [0.60, 55, 65]], [[0.75, 45, 55], [0.25, 155, 25]], [[0.30, 200, 65], [0.45, 190, 110]], [[0.25, 110, 175], [0.40, 55, 110]], [[0.75, 15, 45], [0.35, 130, 70]], [[0.35, 135, 95], [0.40, 10, 150]], [[0.55, 180, 105], [0.70, 150, 180]], [[0.40, 90, 60], [0.65, 105, 195]], [[0.55, 170, 35], [0.35, 10, 95]], [[0.65, 20, 15], [0.75, 10, 35]]], [[[0.65, 10, 105], [0.55, 140, 200]], [[0.65, 90, 130], [0.35, 195, 85]], [[0.60, 95, 150], [0.25, 195, 145]], [[0.30, 35, 15], [0.40, 195, 130]], [[0.40, 120, 165], [0.60, 20, 190]], [[0.75, 20, 75], [0.40, 10, 15]], [[0.40, 170, 130], [0.75, 30, 60]], [[0.75, 45, 135], [0.40, 15, 10]], [[0.65, 60, 90], [0.40, 160, 70]], [[0.30, 155, 65], [0.60, 80, 100]], [[0.35, 115, 160], [0.40, 55, 170]], [[0.30, 110, 95], [0.75, 120, 105]], [[0.30, 90, 60], [0.60, 105, 195]], [[0.65, 25, 35], [0.60, 120, 150]], [[0.75, 45, 65], [0.65, 95, 105]], [[0.65, 175, 170], [0.45, 50, 40]], [[0.65, 40, 100], [0.40, 130, 85]], [[0.35, 100, 175], [0.75, 160, 40]], [[0.50, 80, 40], [0.35, 105, 50]], [[0.60, 45, 60], [0.65, 50, 55]]], [[[0.40, 135, 80], [0.60, 55, 115]], [[0.70, 130, 155], [0.65, 115, 85]], [[0.75, 30, 90], [0.40, 75, 50]], [[0.75, 135, 70], [0.60, 170, 75]], [[0.35, 200, 180], [0.60, 85, 200]], [[0.60, 55, 85], [0.30, 85, 55]], [[0.45, 55, 150], [0.55, 195, 85]], [[0.60, 40, 45], [0.25, 110, 10]], [[0.50, 65, 30], [0.45, 40, 10]], [[0.40, 115, 135], [0.45, 155, 20]], [[0.55, 45, 110], [0.40, 40, 35]], [[0.25, 40, 30], [0.50, 20, 45]], [[0.60, 25, 95], [0.70, 140, 175]], [[0.50, 100, 130], [0.45, 130, 120]], [[0.25, 70, 45], [0.75, 75, 15]], [[0.45, 150, 200], [0.30, 30, 90]], [[0.30, 170, 140], [0.60, 55, 200]], [[0.40, 175, 60], [0.50, 125, 30]], [[0.75, 25, 75], [0.40, 105, 70]], [[0.65, 90, 135], [0.50, 20, 25]]], [[[0.55, 130, 165], [0.25, 155, 65]], [[0.50, 75, 200], [0.70, 200, 35]], [[0.30, 70, 20], [0.40, 145, 85]], [[0.75, 20, 40], [0.60, 110, 125]], [[0.40, 10, 60], [0.35, 60, 90]], [[0.35, 95, 165], [0.60, 55, 110]], [[0.45, 160, 140], [0.40, 105, 55]], [[0.35, 150, 110], [0.55, 75, 120]], [[0.50, 120, 110], [0.45, 150, 85]], [[0.60, 55, 10], [0.40, 50, 15]], [[0.75, 110, 40], [0.40, 170, 10]], [[0.60, 40, 60], [0.25, 150, 50]], [[0.25, 125, 25], [0.50, 115, 90]], [[0.25, 45, 15], [0.30, 140, 60]], [[0.40, 195, 130], [0.25, 55, 35]], [[0.40, 135, 110], [0.45, 85, 120]], [[0.65, 90, 20], [0.50, 80, 200]], [[0.35, 185, 20], [0.40, 135, 35]], [[0.75, 20, 140], [0.70, 105, 65]], [[0.55, 30, 180], [0.45, 70, 145]]], [[[0.30, 190, 15], [0.40, 135, 125]], [[0.65, 30, 10], [0.40, 85, 30]], [[0.40, 170, 180], [0.70, 30, 200]], [[0.40, 165, 110], [0.65, 35, 65]], [[0.60, 155, 45], [0.65, 120, 50]], [[0.35, 30, 40], [0.40, 75, 85]], [[0.25, 10, 70], [0.50, 15, 95]], [[0.70, 40, 90], [0.50, 80, 45]], [[0.30, 65, 45], [0.40, 25, 35]], [[0.45, 85, 50], [0.55, 115, 85]], [[0.50, 90, 100], [0.40, 125, 85]], [[0.25, 85, 15], [0.60, 80, 95]], [[0.55, 65, 115], [0.60, 85, 150]], [[0.50, 85, 105], [0.25, 100, 55]], [[0.65, 10, 95], [0.35, 55, 195]], [[0.70, 155, 105], [0.30, 95, 35]], [[0.55, 80, 55], [0.45, 115, 25]], [[0.30, 35, 15], [0.45, 165, 135]], [[0.30, 80, 45], [0.70, 75, 145]], [[0.50, 140, 10], [0.25, 10, 70]]], [[[0.25, 90, 30], [0.35, 130, 70]], [[0.70, 120, 80], [0.65, 45, 170]], [[0.60, 75, 80], [0.50, 170, 125]], [[0.50, 120, 40], [0.70, 100, 120]], [[0.30, 145, 150], [0.25, 10, 105]], [[0.75, 40, 90], [0.65, 75, 95]], [[0.70, 65, 45], [0.65, 140, 165]], [[0.50, 125, 135], [0.40, 160, 115]], [[0.55, 70, 170], [0.75, 110, 165]], [[0.45, 80, 110], [0.30, 70, 50]], [[0.65, 35, 110], [0.75, 50, 170]], [[0.75, 10, 30], [0.40, 165, 110]], [[0.40, 175, 105], [0.45, 160, 100]], [[0.50, 40, 60], [0.55, 95, 125]], [[0.50, 110, 120], [0.35, 60, 40]], [[0.50, 100, 75], [0.55, 125, 105]], [[0.40, 160, 30], [0.60, 140, 50]], [[0.45, 100, 40], [0.30, 15, 75]], [[0.45, 50, 155], [0.50, 110, 125]], [[0.60, 140, 125], [0.55, 135, 50]]], [[[0.55, 70, 130], [0.30, 165, 80]], [[0.45, 45, 15], [0.75, 85, 130]], [[0.25, 110, 65], [0.70, 10, 135]], [[0.70, 180, 65], [0.45, 15, 185]], [[0.65, 10, 150], [0.60, 70, 90]], [[0.75, 70, 175], [0.50, 190, 165]], [[0.55, 65, 190], [0.35, 95, 20]], [[0.65, 145, 135], [0.75, 70, 55]], [[0.35, 65, 35], [0.75, 35, 105]], [[0.75, 65, 195], [0.25, 135, 45]], [[0.25, 50, 25], [0.60, 60, 105]], [[0.60, 110, 130], [0.40, 50, 10]], [[0.65, 135, 80], [0.70, 105, 110]], [[0.75, 30, 80], [0.65, 55, 95]], [[0.65, 195, 180], [0.40, 110, 130]], [[0.45, 95, 175], [0.30, 175, 150]], [[0.70, 65, 115], [0.25, 80, 15]], [[0.30, 25, 15], [0.35, 185, 90]], [[0.35, 185, 110], [0.60, 30, 35]], [[0.40, 110, 190], [0.30, 165, 170]]], [[[0.40, 85, 180], [0.65, 200, 35]], [[0.75, 130, 145], [0.60, 105, 10]], [[0.25, 85, 40], [0.45, 195, 165]], [[0.40, 135, 90], [0.35, 195, 105]], [[0.30, 120, 45], [0.45, 100, 80]], [[0.70, 45, 155], [0.55, 125, 145]], [[0.25, 50, 195], [0.30, 150, 25]], [[0.45, 75, 85], [0.50, 10, 200]], [[0.75, 150, 95], [0.45, 95, 20]], [[0.30, 100, 70], [0.35, 75, 65]], [[0.75, 85, 195], [0.50, 110, 80]], [[0.55, 115, 100], [0.70, 55, 80]], [[0.65, 30, 95], [0.30, 180, 75]], [[0.75, 15, 35], [0.40, 90, 50]], [[0.60, 100, 105], [0.40, 60, 35]], [[0.40, 70, 75], [0.30, 110, 50]], [[0.40, 170, 80], [0.50, 165, 135]], [[0.35, 185, 190], [0.25, 110, 100]], [[0.75, 90, 190], [0.25, 170, 30]], [[0.35, 65, 35], [0.25, 90, 30]]], [[[0.60, 30, 125], [0.50, 85, 160]], [[0.30, 150, 15], [0.65, 155, 175]], [[0.55, 150, 135], [0.35, 140, 180]], [[0.75, 35, 155], [0.50, 90, 115]], [[0.30, 180, 30], [0.50, 185, 100]], [[0.40, 75, 50], [0.60, 120, 180]], [[0.50, 40, 55], [0.25, 60, 30]], [[0.70, 55, 100], [0.65, 85, 105]], [[0.70, 85, 35], [0.35, 80, 85]], [[0.60, 85, 100], [0.25, 185, 35]], [[0.25, 165, 160], [0.60, 100, 180]], [[0.55, 50, 70], [0.30, 75, 65]], [[0.40, 65, 30], [0.50, 110, 105]], [[0.40, 130, 155], [0.70, 75, 10]], [[0.30, 125, 95], [0.70, 15, 190]], [[0.40, 55, 20], [0.50, 100, 60]], [[0.55, 105, 140], [0.40, 65, 20]], [[0.30, 140, 60], [0.25, 105, 35]], [[0.70, 35, 125], [0.30, 165, 80]], [[0.30, 185, 75], [0.55, 170, 195]]], [[[0.35, 45, 90], [0.50, 150, 20]], [[0.55, 150, 160], [0.40, 130, 80]], [[0.60, 155, 150], [0.40, 65, 130]], [[0.70, 65, 60], [0.25, 180, 25]], [[0.25, 125, 40], [0.75, 85, 200]], [[0.40, 60, 160], [0.25, 110, 155]], [[0.35, 65, 35], [0.25, 30, 10]], [[0.50, 65, 40], [0.75, 55, 115]], [[0.50, 150, 135], [0.75, 25, 75]], [[0.30, 55, 45], [0.70, 30, 140]], [[0.50, 45, 85], [0.60, 75, 155]], [[0.50, 105, 55], [0.40, 135, 25]], [[0.75, 10, 30], [0.40, 105, 70]], [[0.30, 20, 155], [0.60, 180, 150]], [[0.50, 125, 100], [0.75, 80, 190]], [[0.65, 125, 140], [0.50, 85, 35]], [[0.50, 95, 110], [0.40, 145, 90]], [[0.35, 105, 110], [0.55, 15, 125]], [[0.60, 75, 85], [0.55, 165, 170]], [[0.35, 100, 20], [0.25, 175, 115]]], [[[0.55, 50, 70], [0.50, 170, 150]], [[0.75, 10, 30], [0.40, 195, 130]], [[0.35, 195, 165], [0.60, 70, 175]], [[0.25, 150, 50], [0.75, 40, 140]], [[0.60, 100, 150], [0.25, 135, 45]], [[0.75, 145, 150], [0.60, 160, 65]], [[0.50, 200, 175], [0.25, 155, 30]], [[0.50, 130, 170], [0.40, 160, 140]], [[0.45, 45, 195], [0.60, 170, 35]], [[0.45, 30, 160], [0.50, 25, 195]], [[0.30, 145, 40], [0.50, 65, 50]], [[0.45, 25, 50], [0.30, 100, 70]], [[0.55, 70, 125], [0.75, 180, 50]], [[0.40, 120, 85], [0.25, 130, 45]], [[0.55, 40, 55], [0.35, 150, 75]], [[0.50, 190, 165], [0.75, 80, 190]], [[0.50, 110, 105], [0.60, 85, 120]], [[0.25, 170, 35], [0.50, 70, 40]], [[0.25, 100, 170], [0.75, 60, 135]], [[0.30, 70, 170], [0.45, 200, 195]]], [[[0.45, 190, 175], [0.30, 120, 150]], [[0.25, 120, 85], [0.40, 75, 120]], [[0.40, 40, 35], [0.25, 180, 80]], [[0.30, 45, 35], [0.35, 80, 65]], [[0.65, 80, 135], [0.70, 70, 85]], [[0.70, 170, 195], [0.60, 110, 45]], [[0.35, 110, 20], [0.60, 100, 115]], [[0.45, 45, 40], [0.75, 50, 160]], [[0.40, 185, 110], [0.45, 135, 90]], [[0.35, 200, 160], [0.25, 30, 35]], [[0.35, 80, 55], [0.65, 85, 200]], [[0.55, 140, 200], [0.40, 115, 90]], [[0.25, 105, 35], [0.60, 30, 45]], [[0.35, 190, 50], [0.60, 100, 200]], [[0.50, 95, 70], [0.30, 65, 10]], [[0.70, 80, 60], [0.65, 135, 195]], [[0.75, 30, 70], [0.55, 170, 40]], [[0.75, 140, 10], [0.35, 15, 130]], [[0.60, 10, 15], [0.75, 60, 180]], [[0.40, 185, 115], [0.50, 40, 30]]], [[[0.30, 95, 15], [0.75, 30, 95]], [[0.25, 130, 145], [0.50, 185, 135]], [[0.45, 110, 40], [0.30, 85, 105]], [[0.25, 75, 20], [0.30, 125, 35]], [[0.60, 75, 65], [0.35, 110, 30]], [[0.55, 35, 25], [0.70, 65, 60]], [[0.50, 145, 110], [0.65, 175, 65]], [[0.25, 140, 25], [0.40, 200, 110]], [[0.25, 165, 50], [0.45, 155, 120]], [[0.40, 195, 130], [0.75, 20, 60]], [[0.70, 50, 15], [0.25, 45, 135]], [[0.60, 30, 115], [0.70, 20, 185]], [[0.60, 70, 105], [0.40, 120, 80]], [[0.60, 155, 135], [0.70, 115, 105]], [[0.45, 195, 170], [0.35, 145, 115]], [[0.40, 155, 85], [0.45, 110, 45]], [[0.35, 170, 135], [0.25, 65, 75]], [[0.55, 95, 135], [0.65, 10, 15]], [[0.55, 20, 35], [0.60, 65, 135]], [[0.65, 15, 20], [0.70, 60, 110]]], [[[0.30, 95, 35], [0.40, 155, 125]], [[0.25, 45, 30], [0.35, 100, 95]], [[0.60, 90, 135], [0.40, 120, 80]], [[0.60, 110, 175], [0.25, 195, 65]], [[0.75, 145, 85], [0.25, 30, 105]], [[0.60, 50, 150], [0.45, 30, 60]], [[0.65, 65, 180], [0.25, 140, 100]], [[0.45, 25, 80], [0.65, 185, 125]], [[0.60, 80, 95], [0.40, 130, 70]], [[0.55, 145, 190], [0.50, 140, 120]], [[0.60, 175, 40], [0.65, 165, 25]], [[0.55, 20, 95], [0.40, 170, 195]], [[0.70, 80, 70], [0.35, 150, 170]], [[0.65, 35, 150], [0.70, 140, 55]], [[0.75, 40, 120], [0.40, 75, 50]], [[0.65, 60, 135], [0.40, 195, 125]], [[0.40, 195, 125], [0.75, 55, 80]], [[0.40, 90, 40], [0.55, 30, 10]], [[0.45, 125, 85], [0.40, 70, 25]], [[0.70, 35, 40], [0.60, 155, 170]]], [[[0.30, 165, 65], [0.40, 175, 125]], [[0.50, 45, 60], [0.25, 35, 195]], [[0.50, 25, 20], [0.35, 40, 15]], [[0.50, 100, 75], [0.35, 115, 30]], [[0.45, 165, 150], [0.60, 115, 195]], [[0.50, 105, 80], [0.55, 45, 40]], [[0.50, 40, 80], [0.65, 15, 70]], [[0.45, 125, 60], [0.25, 85, 20]], [[0.50, 90, 85], [0.75, 50, 140]], [[0.60, 100, 50], [0.75, 65, 40]], [[0.70, 105, 130], [0.65, 40, 10]], [[0.25, 130, 20], [0.50, 170, 135]], [[0.45, 65, 70], [0.30, 85, 155]], [[0.25, 60, 30], [0.30, 190, 65]], [[0.35, 25, 100], [0.55, 125, 140]], [[0.75, 75, 115], [0.60, 100, 130]], [[0.75, 10, 30], [0.30, 140, 60]], [[0.50, 85, 115], [0.65, 60, 130]], [[0.40, 70, 75], [0.35, 105, 185]], [[0.75, 10, 30], [0.25, 105, 35]]], [[[0.55, 70, 165], [0.35, 185, 140]], [[0.50, 25, 45], [0.40, 10, 55]], [[0.35, 140, 130], [0.70, 45, 10]], [[0.40, 105, 55], [0.45, 190, 130]], [[0.65, 80, 55], [0.30, 55, 60]], [[0.35, 120, 100], [0.55, 125, 160]], [[0.65, 110, 190], [0.45, 200, 135]], [[0.50, 100, 165], [0.35, 105, 95]], [[0.45, 140, 110], [0.60, 70, 100]], [[0.45, 75, 30], [0.60, 160, 10]], [[0.60, 55, 70], [0.25, 170, 50]], [[0.65, 70, 130], [0.60, 130, 195]], [[0.45, 50, 70], [0.60, 185, 50]], [[0.65, 135, 45], [0.60, 200, 115]], [[0.25, 130, 70], [0.55, 30, 60]], [[0.45, 60, 95], [0.60, 50, 130]], [[0.50, 80, 115], [0.65, 30, 120]], [[0.70, 10, 20], [0.40, 190, 95]], [[0.75, 55, 165], [0.30, 175, 75]], [[0.70, 15, 10], [0.75, 45, 105]]], [[[0.65, 95, 145], [0.55, 150, 10]], [[0.30, 70, 30], [0.35, 130, 70]], [[0.35, 90, 155], [0.45, 70, 200]], [[0.50, 55, 25], [0.60, 105, 120]], [[0.75, 20, 60], [0.40, 45, 30]], [[0.35, 95, 50], [0.70, 35, 140]], [[0.45, 120, 60], [0.50, 150, 125]], [[0.70, 65, 195], [0.25, 185, 100]], [[0.25, 65, 35], [0.45, 10, 60]], [[0.60, 180, 145], [0.55, 40, 140]], [[0.40, 20, 165], [0.25, 175, 200]], [[0.50, 70, 180], [0.25, 195, 160]], [[0.25, 165, 35], [0.75, 50, 90]], [[0.40, 35, 70], [0.50, 150, 90]], [[0.75, 35, 80], [0.25, 145, 25]], [[0.70, 50, 195], [0.40, 10, 15]], [[0.70, 25, 40], [0.25, 80, 20]], [[0.50, 120, 50], [0.75, 95, 150]], [[0.45, 170, 190], [0.55, 130, 90]], [[0.65, 65, 155], [0.35, 50, 20]]], [[[0.70, 45, 135], [0.65, 85, 190]], [[0.35, 90, 55], [0.75, 65, 140]], [[0.50, 115, 90], [0.40, 195, 105]], [[0.50, 100, 145], [0.40, 150, 160]], [[0.40, 195, 130], [0.60, 30, 45]], [[0.35, 35, 130], [0.45, 115, 195]], [[0.50, 10, 45], [0.60, 35, 105]], [[0.50, 135, 100], [0.70, 40, 35]], [[0.65, 120, 75], [0.50, 115, 20]], [[0.50, 105, 70], [0.75, 30, 20]], [[0.35, 125, 25], [0.25, 10, 135]], [[0.65, 60, 130], [0.45, 75, 85]], [[0.35, 165, 35], [0.75, 20, 185]], [[0.25, 15, 10], [0.65, 40, 105]], [[0.40, 120, 80], [0.25, 90, 30]], [[0.65, 70, 120], [0.70, 165, 155]], [[0.50, 100, 105], [0.30, 150, 60]], [[0.55, 65, 35], [0.65, 30, 25]], [[0.55, 200, 40], [0.40, 165, 115]], [[0.25, 170, 75], [0.55, 60, 85]]], [[[0.40, 35, 140], [0.55, 175, 40]], [[0.75, 45, 125], [0.60, 80, 130]], [[0.30, 170, 50], [0.35, 130, 55]], [[0.40, 165, 140], [0.70, 70, 195]], [[0.45, 180, 135], [0.50, 165, 125]], [[0.70, 80, 110], [0.45, 140, 60]], [[0.25, 25, 40], [0.65, 90, 10]], [[0.50, 15, 175], [0.65, 195, 200]], [[0.30, 155, 95], [0.60, 200, 180]], [[0.50, 185, 155], [0.75, 55, 105]], [[0.70, 20, 45], [0.45, 170, 160]], [[0.50, 120, 185], [0.55, 90, 160]], [[0.30, 15, 40], [0.35, 165, 145]], [[0.75, 15, 70], [0.40, 120, 80]], [[0.45, 60, 115], [0.50, 75, 145]], [[0.70, 85, 15], [0.60, 130, 100]], [[0.60, 80, 120], [0.75, 50, 150]], [[0.75, 50, 130], [0.25, 170, 50]], [[0.45, 165, 135], [0.25, 60, 20]], [[0.75, 75, 100], [0.60, 125, 85]]], [[[0.50, 150, 110], [0.65, 35, 20]], [[0.65, 25, 55], [0.55, 100, 145]], [[0.60, 25, 45], [0.75, 70, 165]], [[0.70, 110, 100], [0.50, 130, 185]], [[0.35, 115, 60], [0.45, 80, 30]], [[0.65, 25, 95], [0.40, 115, 105]], [[0.60, 70, 50], [0.55, 60, 55]], [[0.65, 30, 175], [0.25, 200, 120]], [[0.60, 30, 45], [0.40, 15, 10]], [[0.25, 135, 170], [0.30, 75, 150]], [[0.65, 75, 95], [0.25, 100, 20]], [[0.75, 30, 90], [0.25, 195, 65]], [[0.65, 10, 35], [0.50, 55, 45]], [[0.75, 75, 10], [0.65, 115, 45]], [[0.75, 100, 25], [0.25, 140, 135]], [[0.50, 135, 150], [0.65, 45, 105]], [[0.70, 130, 120], [0.65, 165, 185]], [[0.45, 70, 155], [0.75, 145, 105]], [[0.65, 60, 30], [0.25, 100, 155]], [[0.25, 160, 90], [0.55, 45, 155]]], [[[0.40, 115, 145], [0.65, 35, 190]], [[0.25, 180, 60], [0.40, 105, 70]], [[0.60, 70, 105], [0.25, 60, 20]], [[0.55, 65, 180], [0.50, 130, 25]], [[0.50, 125, 155], [0.75, 15, 80]], [[0.35, 185, 95], [0.65, 170, 125]], [[0.40, 25, 40], [0.55, 95, 170]], [[0.40, 140, 115], [0.60, 165, 120]], [[0.50, 50, 30], [0.75, 25, 35]], [[0.40, 175, 25], [0.55, 200, 105]], [[0.65, 90, 40], [0.70, 70, 15]], [[0.30, 185, 65], [0.75, 75, 125]], [[0.55, 125, 180], [0.70, 70, 150]], [[0.25, 70, 145], [0.55, 130, 15]], [[0.50, 95, 110], [0.40, 60, 80]], [[0.60, 160, 175], [0.30, 85, 25]], [[0.65, 20, 15], [0.25, 65, 30]], [[0.35, 65, 55], [0.65, 25, 75]], [[0.35, 90, 105], [0.60, 75, 175]], [[0.55, 145, 65], [0.60, 160, 80]]], [[[0.55, 15, 110], [0.40, 195, 45]], [[0.50, 150, 25], [0.35, 115, 55]], [[0.50, 145, 190], [0.25, 80, 200]], [[0.65, 135, 180], [0.45, 145, 70]], [[0.75, 30, 120], [0.25, 75, 35]], [[0.25, 20, 10], [0.75, 55, 105]], [[0.50, 50, 165], [0.40, 75, 115]], [[0.60, 15, 55], [0.40, 95, 85]], [[0.70, 150, 30], [0.60, 120, 170]], [[0.30, 165, 85], [0.25, 155, 90]], [[0.45, 145, 105], [0.40, 130, 55]], [[0.50, 55, 110], [0.60, 105, 180]], [[0.75, 25, 60], [0.55, 75, 120]], [[0.35, 105, 65], [0.45, 85, 105]], [[0.40, 125, 50], [0.30, 145, 45]], [[0.75, 60, 130], [0.35, 180, 80]], [[0.65, 60, 90], [0.35, 20, 15]], [[0.60, 50, 75], [0.40, 30, 20]], [[0.65, 125, 50], [0.75, 160, 170]], [[0.75, 25, 75], [0.60, 20, 30]]], [[[0.45, 200, 30], [0.55, 185, 85]], [[0.45, 180, 165], [0.40, 150, 85]], [[0.60, 90, 135], [0.25, 150, 50]], [[0.60, 30, 45], [0.75, 45, 135]], [[0.40, 135, 115], [0.70, 160, 145]], [[0.35, 140, 95], [0.45, 195, 200]], [[0.50, 185, 165], [0.45, 130, 70]], [[0.75, 25, 115], [0.35, 150, 100]], [[0.65, 30, 70], [0.60, 10, 15]], [[0.60, 145, 15], [0.70, 40, 110]], [[0.25, 170, 50], [0.50, 135, 125]], [[0.40, 145, 80], [0.50, 35, 15]], [[0.65, 195, 90], [0.45, 10, 150]], [[0.65, 85, 120], [0.25, 180, 45]], [[0.25, 195, 190], [0.65, 100, 135]], [[0.30, 95, 10], [0.65, 80, 75]], [[0.60, 100, 165], [0.50, 95, 135]], [[0.55, 105, 135], [0.35, 150, 115]], [[0.65, 105, 110], [0.70, 80, 85]], [[0.30, 90, 45], [0.25, 185, 60]]], [[[0.65, 95, 50], [0.70, 130, 160]], [[0.40, 50, 110], [0.65, 115, 20]], [[0.60, 80, 120], [0.25, 105, 35]], [[0.35, 65, 35], [0.25, 90, 30]], [[0.60, 120, 180], [0.40, 110, 45]], [[0.25, 20, 190], [0.55, 195, 55]], [[0.35, 10, 30], [0.70, 195, 65]], [[0.70, 10, 105], [0.55, 125, 165]], [[0.75, 70, 170], [0.35, 40, 15]], [[0.40, 45, 20], [0.25, 125, 50]], [[0.35, 105, 65], [0.40, 10, 40]], [[0.45, 170, 20], [0.30, 125, 75]], [[0.50, 185, 150], [0.25, 145, 25]], [[0.50, 80, 135], [0.70, 25, 145]], [[0.30, 35, 10], [0.35, 145, 95]], [[0.55, 45, 30], [0.30, 60, 20]], [[0.60, 35, 90], [0.50, 20, 50]], [[0.45, 125, 115], [0.65, 80, 165]], [[0.35, 190, 80], [0.65, 90, 150]], [[0.50, 175, 115], [0.70, 120, 160]]], [[[0.75, 40, 135], [0.65, 130, 20]], [[0.75, 55, 165], [0.60, 80, 120]], [[0.55, 45, 180], [0.50, 50, 130]], [[0.60, 150, 45], [0.75, 110, 50]], [[0.40, 10, 45], [0.30, 180, 85]], [[0.60, 105, 130], [0.40, 200, 115]], [[0.25, 170, 60], [0.65, 130, 200]], [[0.40, 175, 200], [0.35, 130, 170]], [[0.35, 20, 15], [0.50, 15, 40]], [[0.70, 35, 95], [0.55, 125, 160]], [[0.50, 160, 145], [0.65, 125, 190]], [[0.25, 85, 45], [0.40, 115, 70]], [[0.25, 100, 10], [0.50, 60, 25]], [[0.60, 150, 85], [0.25, 20, 65]], [[0.40, 180, 175], [0.30, 40, 90]], [[0.75, 160, 90], [0.70, 65, 100]], [[0.50, 95, 110], [0.25, 150, 70]], [[0.75, 20, 60], [0.25, 165, 55]], [[0.55, 175, 195], [0.45, 190, 140]], [[0.60, 180, 145], [0.55, 25, 55]]], [[[0.25, 40, 20], [0.75, 180, 195]], [[0.25, 190, 185], [0.55, 25, 50]], [[0.55, 15, 75], [0.65, 65, 155]], [[0.75, 40, 120], [0.30, 175, 75]], [[0.35, 125, 70], [0.70, 45, 65]], [[0.40, 80, 185], [0.65, 145, 180]], [[0.75, 45, 125], [0.50, 40, 20]], [[0.60, 25, 90], [0.50, 165, 180]], [[0.40, 185, 115], [0.50, 20, 25]], [[0.55, 135, 110], [0.70, 60, 90]], [[0.65, 125, 150], [0.50, 190, 145]], [[0.60, 180, 35], [0.75, 160, 60]], [[0.30, 115, 70], [0.65, 10, 60]], [[0.50, 70, 80], [0.35, 180, 90]], [[0.55, 160, 165], [0.75, 70, 110]], [[0.75, 15, 45], [0.30, 175, 75]], [[0.50, 170, 145], [0.25, 125, 25]], [[0.30, 185, 105], [0.75, 25, 120]], [[0.50, 175, 170], [0.70, 140, 80]], [[0.30, 65, 50], [0.70, 85, 200]]], [[[0.25, 95, 45], [0.40, 185, 170]], [[0.75, 60, 35], [0.60, 150, 165]], [[0.50, 65, 45], [0.60, 80, 85]], [[0.50, 140, 25], [0.75, 200, 40]], [[0.45, 15, 35], [0.50, 160, 185]], [[0.35, 140, 60], [0.40, 95, 20]], [[0.30, 140, 15], [0.45, 60, 20]], [[0.50, 70, 25], [0.60, 190, 75]], [[0.30, 180, 65], [0.55, 150, 190]], [[0.50, 145, 125], [0.60, 130, 170]], [[0.55, 125, 170], [0.65, 65, 190]], [[0.40, 30, 40], [0.45, 185, 145]], [[0.75, 10, 30], [0.40, 195, 130]], [[0.45, 20, 25], [0.60, 10, 20]], [[0.25, 165, 200], [0.45, 125, 35]], [[0.35, 60, 50], [0.40, 155, 90]], [[0.40, 85, 95], [0.45, 145, 125]], [[0.75, 125, 35], [0.50, 140, 170]], [[0.25, 195, 65], [0.35, 130, 70]], [[0.60, 140, 165], [0.35, 25, 15]]]];

var Timer = function () {
    function Timer() {
        _classCallCheck(this, Timer);

        this.started = false;
        this.paused = false;
        this.startTime = 0;
        this.stopTime = 0;
        this.currentTrail = -1;
    }

    Timer.prototype.start = function start() {
        var now = new Date();
        this.startTime = now.getTime();
        this.started = true;this.stopTime = 0;
    };

    Timer.prototype.elapsed = function elapsed() {
        if (!this.started) {
            return 0;
        }
        var now = new Date();
        return now.getTime() - this.startTime;
    };

    Timer.prototype.stop = function stop() {
        this.stopTime = this.elapsed();
        this.started = false;
    };

    Timer.prototype.pause = function pause() {
        if (this.paused) return;
        var now = new Date();
        this.pauseTime = now.getTime();
        this.paused = true;
    };

    Timer.prototype.resume = function resume() {
        if (!this.paused) return;
        var now = new Date();
        this.startTime += now.getTime() - this.pauseTime;
        this.paused = false;
        this.pauseTime = 0;
    };

    return Timer;
}();

var GambGame = function () {

    /**
     * Initialize the class object
     *
     * @param {gambConfig} object - the config for the Gamb game
     * @param {day} integer - the day of the testing
     *
     */
    function GambGame(gambConfig, day) {
        _classCallCheck(this, GambGame);

        this.canvas = document.getElementById("thirdpartyCanvas");
        this.canvas.setAttribute('style', "background: black");

        // Design for 1024 * 768
        this.canvas.width = 1024 - 7;
        this.canvas.height = window.innerHeight > 768 ? 768 - 7 : window.innerHeight - 7;

        this.ctx = this.canvas.getContext("2d");
        this.offset = $('#thirdpartyCanvas').offset();

        this.gameData = gambConfig[day];
        this.allResponses = [];

        // set phase to welcome
        this.phase = 'welcome';

        this.currentWinnings = 0;

        // init timer
        this.timer = new Timer();
        this.timerTrial = new Timer();

        this.sound = new Audio(pathPrefix + "/gamb/sounds/keyclick.mp3");

        // Variable for each trial
        this.trailIndex = 0; // 20 trails a day, this is used to indicate the current trail
        this.totalNumOfTrails = 20;
        this.curSelectedWheel = 'none'; // 'left' or 'right'
        this.startPoints = [];
        //select a random spin duration
        this.spinTimeTotal = 1000 + 2500*Math.random();
        this.spinAngle = 30; // 30 degree for each time
        this.spinnedTime = 0;
        this.spinnedRads = 0; // The spinned radian
        this.curTrialData = [];

        // Variables for rate feeling
        this.feelingXaxis = 512;
        this.doRating = false;
        this.feelingString = '+0';

        // Init the continue button
        this.continueBtn = {
            image: imgContinue,
            x: 409.5, // inital location x
            y: 500, // inital location y
            width: 205,
            height: 61
        };
    }

    GambGame.prototype.start = function start() {
        // Clear canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        // Draw a rect background with round corner
        this.ctx.beginPath();
        this.ctx.moveTo(60, 40);
        this.ctx.lineTo(964, 40);
        this.ctx.quadraticCurveTo(984, 40, 984, 60);
        this.ctx.lineTo(984, 600);
        this.ctx.quadraticCurveTo(984, 620, 964, 620);
        this.ctx.lineTo(60, 620);
        this.ctx.quadraticCurveTo(40, 620, 40, 600);
        this.ctx.lineTo(40, 60);
        this.ctx.quadraticCurveTo(40, 40, 60, 40);
        this.ctx.fillStyle = "#064d00";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();

        // The instruction text
        this.ctx.fillStyle = "#FFFFFF";
        this.ctx.font = "24px Georgia";
        this.ctx.textAlign = "left";
        this.ctx.fillText('Wheel of Fortune', 60, 110);
        this.ctx.fillText('You can choose between 2 different wheels of fortune to gamble on. Each wheel ', 60, 180);
        this.ctx.fillText('consists of a winning segment (green, positive number) and losing segment (red, ', 60, 215);
        this.ctx.fillText('negative number). The size of each segment indicates how likely the ', 60, 250);
        this.ctx.fillText('win/loss is to happen. ', 60, 285);
        this.ctx.fillText('Try to win as much money as you can!', 60, 350);

        // Draw continue button on the first page
        this.ctx.drawImage(this.continueBtn.image, this.continueBtn.x, this.continueBtn.y);

        this.currentWinningScore = 0;

        // Start the global timmer
        this.timer.start();

        // event for mouse
        var self = this; // Keep a reference to the current this scope
        this.canvas.onmousedown = function (ev) {
            self.mouseDown(ev);
        };
        this.canvas.onmousemove = function (ev) {
            self.mouseMove(ev);
        };
        this.canvas.onmouseup = function (ev) {
            self.mouseUp(ev);
        };
        // event for toutch screen
        this.canvas.ontouchstart = function () {
            self.touchStart();
        };
        this.canvas.ontouchmove = function () {
            self.touchMove();
        };
        this.canvas.ontouchend = function () {
            self.touchEnd();
        };
    };

    /**
     *
     *
     */


    GambGame.prototype.drawWheels = function drawWheels() {
        var _this = this;

        var spinAngle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var status = arguments[1];

        // Step 1: clear canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        if (this.trailIndex < this.totalNumOfTrails) {
            // Get the trail wheel data
            this.curTrialData = this.gameData[this.trailIndex];
            // Example: [[0.25,110,75],[0.60,20,125]]
            //    left wheel: winning probability 0.25, winning score 110, losing score -75
            //    right wheel: winning probability 0.60, winning score 20, losing score -125
            this.curTrialData.forEach(function (data, index) {
                // Index 0 : Left Wheel
                // Index 1 : Right Wheel
                var centerX = index === 0 ? 254 : 762;
                var centerY = 384;
                var radius = 200;

                if (_this.curSelectedWheel === 'none' || _this.curSelectedWheel === index) {
                    // Winning variables
                    var winning = data[0];
                    var winningScore = data[1];
                    var winningRads = 2 * Math.PI * winning;

                    // Losing variables
                    var losing = 1 - winning;
                    var losingScore = data[2];
                    var losingRads = 2 * Math.PI * losing;

                    // Get a random start point when in 'select' phase
                    if (_this.phase === 'select') {
                        _this.startPoints.push(Math.random() * 2 * Math.PI);
                    }
                    // Get the corresponding start point + spinnedRads
                    //   In the 'select' phase, spinnedRads is 0
                    //   in the 'spinning' phase, spinnedRads is the passed value
                    _this.spinnedRads += spinAngle / 180 * Math.PI;
                    var startPoint = _this.startPoints[index] + _this.spinnedRads;

                    // Winning part wheel
                    _this.ctx.fillStyle = "#00FF00";
                    _this.ctx.beginPath();
                    _this.ctx.moveTo(centerX, centerY);
                    _this.ctx.arc(centerX, centerY, radius, startPoint, startPoint + winningRads);
                    _this.ctx.lineTo(centerX, centerY);
                    _this.ctx.fill();

                    // Losing part wheel
                    _this.ctx.fillStyle = "#FF0000";
                    _this.ctx.beginPath();
                    _this.ctx.moveTo(centerX, centerY);
                    _this.ctx.arc(centerX, centerY, radius, startPoint + winningRads, startPoint + winningRads + losingRads);
                    _this.ctx.lineTo(centerX, centerY);
                    _this.ctx.fill();

                    // Center circle
                    _this.ctx.fillStyle = "#FF0000";
                    _this.ctx.beginPath();
                    _this.ctx.arc(centerX, centerY, 3, 0, Math.PI * 2);
                    _this.ctx.fill();
                    // Outline circle
                    _this.ctx.strokeStyle = "#000000";
                    _this.ctx.beginPath();
                    _this.ctx.arc(centerX, centerY, 4, 0, Math.PI * 2);
                    _this.ctx.stroke();

                    // Work out the score display location
                    var middleLine = (winningRads / 2 + startPoint) % (Math.PI * 2);
                    _this.ctx.save();
                    _this.ctx.fillStyle = "#FFFFFF";
                    _this.ctx.font = "26px Arial Bold";
                    _this.ctx.textAlign = "center";
                    // winning score text
                    _this.ctx.fillText(winningScore, radius * Math.cos(middleLine) / 2 + centerX, radius * Math.sin(middleLine) / 2 + centerY);
                    // losing score text
                    _this.ctx.fillText("-" + losingScore, centerX - radius * Math.cos(middleLine) / 2, centerY - radius * Math.sin(middleLine) / 2);
                    _this.ctx.restore();

                    _this.drawArrow(centerX);

                    // Setup timmer for current step
                    if (_this.timerTrial.currentTrail !== _this.trailIndex) {
                        _this.timerTrial.start();
                        _this.timerTrial.currentTrail = _this.trailIndex;
                    }
                } else {
                    // Draw a blue & yellow pattern
                    var _startPoint = 0;
                    for (var i = 0; i < 18; i++) {
                        // Get the blue or yellow
                        _this.ctx.fillStyle = i % 2 === 0 ? "#FFFF00" : "#0000FF";
                        _this.ctx.beginPath();
                        _this.ctx.moveTo(centerX, centerY);
                        _this.ctx.arc(centerX, centerY, radius, _startPoint, _startPoint + Math.PI / 9);
                        _this.ctx.lineTo(centerX, centerY);
                        _this.ctx.fill();
                        _startPoint += Math.PI / 9;
                    }
                }

                _this.ctx.fillStyle = "#FFFFFF";
                _this.ctx.font = "30px Georgia";
                _this.ctx.textAlign = "center"; 
                _this.ctx.fillText("Current Winnings: " + _this.currentWinnings, _this.canvas.width / 2, 80);
            });

            if (status === 'display') {
                this.timerTrial.start();
            }
            if (status === 'spin') {
                this.timerTrial.stop();
            }
        }
    };

    GambGame.prototype.spinWheel = function spinWheel(status) {

        this.drawWheels(this.spinAngle, status);

        var self = this;
        var remainingTime = this.spinTimeTotal - this.spinnedTime;
        if (remainingTime > 0) {
            this.spinnedTime += 20;
            if (remainingTime < 1200) {
                // A flag to control the angular speed
                if (this.oddEven == 'odd') {
                    this.spinAngle -= 1; // Reduce the spinning angular speed
                    this.oddEven = 'even';
                } else {
                    this.oddEven = 'odd';
                }
            }
            setTimeout(function () {
                self.spinWheel();
            }, 20);
        } else {
            // Indicate a short pause period
            this.phase = 'pause';
            //select a new random spin duration
       		this.spinTimeTotal = 1000 + 2500*Math.random();
       		console.log(this.spinTimeTotal)
            // Get the selected wheel data and start point
            var selectedWheelData = this.curTrialData[this.curSelectedWheel];
            var startPoint = this.startPoints[this.curSelectedWheel];

            // Get the beg and end of the winning area
            var winningAreaBeg = (startPoint + this.spinnedRads) % (Math.PI * 2);
            var winningAreaEnd = winningAreaBeg + selectedWheelData[0] * 2 * Math.PI;
            var score = void 0;

            console.log('Winning area Beg: '+ winningAreaBeg*180 /Math.PI + ' Winning area end:' + winningAreaEnd*180 /Math.PI)
            // Add winningScore if arrow point is in the winning area, otherwise minus losingScore
            // AI I am assuming that 1.5*math.PI indicates where the arrow is (at the top): this would mean this is recorded relative to 3 o'clock (90deg)
            //AI: also, I am sure there is a way more sensible/robust way to change all of this, but my geometry is not up to scratch right now

            //Convert Rads2Angle:
            tempBeg = winningAreaBeg*180/Math.PI
            tempEnd = (winningAreaEnd*180/Math.PI)

            //if Begining of rendering is less than 90 from start point, we are overlapping midline
            if (tempBeg <= 90) {
            	
            	//if endline is between 270 & 360 AND the beg is less than 90 we revert back to 270 equation
            	if (tempEnd > 270) {
            		Beg = 270 - tempBeg
            	} else {
            	//We just add 90 instead of subtract 270 (as this will not have worked if obtuse angle and endline is between the start point and our translation target)	
            	    Beg = tempBeg +90 
            	}
            } else {
            	Beg = 270 - tempBeg
            }

            //angle between the two points: 
            tempAng = tempEnd - tempBeg 
            //suptract absolute value of beginning point from this angle to get point two location relative 

            //Relative to spinner location 


            if (winningAreaBeg <= 1.5 * Math.PI && winningAreaEnd >= 1.5 * Math.PI) {
            	//WIN
                score = selectedWheelData[1];
                beg_dist = Beg

               //subtract absolute value of beginning point from this angle to get point two location relative 
                end_dist = tempAng - Math.abs(Beg)
                console.log('dist to beg: ' + beg_dist + 'dist to end: ' + end_dist)
                //Nearest Border 

            } else {
            	//LOSE
                score = -selectedWheelData[2];
                beg_dist = Beg

               //subtract absolute value of beginning point from the reverse angle to get point two location relative
                end_dist = (360-tempAng) - Math.abs(Beg)

                console.log('dist to beg: ' + beg_dist + 'dist to end: ' + end_dist)
            }

            this.currentWinnings += score;
            console.log('current winnnings: ' + this.currentWinnings)

            // Start 152, End 277, degreesToBorder 160, targetAngle 57, prob 0.35, gain 115, loss 60, score -60
            this.allResponses.push({
                task: "GAMB - " + (this.trailIndex + 1),
                score: score,
                rt: this.timerTrial.stopTime,
                selectedWheel: {
                    prob: selectedWheelData[0],
                    gain: selectedWheelData[1],
                    loss: selectedWheelData[2]
                },
                TrialData: this.curTrialData,
                side: this.curSelectedWheel,
                total: this.currentWinnings,
                nearBound_1: beg_dist,
                nearBound_2: end_dist

            });

            // Draw again without spinAngle, it has stopped!
            this.drawWheels();
            console.log('wheels drawn again')
            this.spinAngle = 30; // Reset the angular speed

            setTimeout(function () {
                self.setupNextTrail();
            }, 1000);
        }
    };

    GambGame.prototype.rateFeeling = function rateFeeling() {
        // Step 1: clear canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        // A grey background
        this.ctx.fillStyle = "#404040";
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        this.ctx.strokeStyle = "#000000";
        this.ctx.lineWidth = 2;
        // Anger
        this.ctx.beginPath();
        this.ctx.arc(250, 350, 30, 0, 2 * Math.PI);
        this.ctx.fillStyle = "#ff0000";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();

        this.ctx.beginPath();
        this.ctx.arc(240, 343, 4, 0, 2 * Math.PI);
        this.ctx.fillStyle = "#000000";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();

        this.ctx.beginPath();
        this.ctx.arc(260, 343, 4, 0, 2 * Math.PI);
        this.ctx.fillStyle = "#000000";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();

        // anger face
        this.ctx.strokeStyle = "#000000";
        this.ctx.beginPath();
        this.ctx.moveTo(235, 365);
        this.ctx.quadraticCurveTo(250, 350, 265, 365);
        this.ctx.stroke();

        // Smile
        this.ctx.beginPath();
        this.ctx.arc(774, 350, 30, 0, 2 * Math.PI);
        this.ctx.fillStyle = "#00b300";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();

        this.ctx.beginPath();
        this.ctx.arc(764, 343, 4, 0, 2 * Math.PI);
        this.ctx.fillStyle = "#000000";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();

        this.ctx.beginPath();
        this.ctx.arc(784, 343, 4, 0, 2 * Math.PI);
        this.ctx.fillStyle = "#000000";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();
        // smile face
        this.ctx.strokeStyle = "#000000";
        this.ctx.beginPath();
        this.ctx.moveTo(759, 355);
        this.ctx.quadraticCurveTo(774, 375, 789, 355);
        this.ctx.stroke();

        // Slider
        this.ctx.fillStyle = "#00b8e6";
        // Fractal width is 67.5
        this.ctx.fillRect(290, 345, this.canvas.width - 575, 15);
        // Arrow
        var x = this.feelingXaxis;
        this.ctx.beginPath();
        this.ctx.moveTo(x, 340);
        this.ctx.lineTo(x + 15, 330);
        this.ctx.lineTo(x + 7, 330);
        this.ctx.lineTo(x + 7, 300);
        this.ctx.lineTo(x - 7, 300);
        this.ctx.lineTo(x - 7, 330);
        this.ctx.lineTo(x - 15, 330);
        this.ctx.lineTo(x, 340);
        this.ctx.fillStyle = "#00b8e6";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();

        this.ctx.fillStyle = "#FFFFFF";
        this.ctx.font = "18px Georgia";
        this.ctx.textAlign = 'center';
        this.ctx.fillText('very unhappy', 250, 405);
        this.ctx.fillText('neutral', 512, 405);
        this.ctx.fillText('very happy', 774, 405);
        this.ctx.font = "36px Georgia";
        this.ctx.fillText("How are you feeling?", this.canvas.width / 2, 120);

        this.ctx.font = "26px Georgia";
        var currValue = Math.floor(21 * (x - 265) / 449) - 11;
        this.feelingString = currValue >= 0 ? '+' + currValue.toString() : currValue.toString();
        this.ctx.fillText(this.feelingString, x, 285);

        // Draw continue button on the first page
        this.continueBtn.x = 409.5; // initial location x
        this.continueBtn.y = 500; // initial location y
        this.ctx.drawImage(this.continueBtn.image, this.continueBtn.x, this.continueBtn.y);
    };

    GambGame.prototype.setupNextTrail = function setupNextTrail() {

        // Variable for each trial
        this.trailIndex++; // 20 trails a day, this is used to indicate the current trail
        this.curSelectedWheel = 'none'; // 'left' or 'right'
        this.startPoints = [];
        this.spinnedTime = 0;
        this.spinnedRads = 0; // The spinned radian
        this.curTrialData = [];

        if (this.trailIndex < this.totalNumOfTrails) {
            this.phase = 'select';
            this.drawWheels(0, 'start');
        } else {
        	//return to 0 location for feeling rating
        	this.feelingXaxis = this.canvas.width *0.5
            this.phase = 'rateFeeling';
            this.rateFeeling();
        }

        // Response: <response><task>GAMB</task><elap>618555</elap><code>tneg</code><rtme>37679</rtme><key>68</key><extras>Start 152, End 277, degreesToBorder 160, targetAngle 57, prob 0.35, gain 115, loss 60, score -60</extras></response>
        // 121cogn_tasks.js:1488 Stage: 10
    };

    GambGame.prototype.drawArrow = function drawArrow(x) {
        this.ctx.beginPath();
        this.ctx.moveTo(x, 184);
        this.ctx.lineTo(x + 6, 184);
        this.ctx.lineTo(x, 210);
        this.ctx.lineTo(x - 6, 184);
        this.ctx.lineTo(x, 184);
        this.ctx.fillStyle = "#000000";
        this.ctx.fill();
        this.ctx.closePath();
        this.ctx.stroke();
    };

    GambGame.prototype.clickInRect = function clickInRect(pos, rect) {
        return pos.x > rect.x && rect.x + rect.width > pos.x && pos.y > rect.y && rect.y + rect.height > pos.y;
    };

    GambGame.prototype.clickInCircle = function clickInCircle(pos, circle) {
        var distance = Math.pow(pos.x - circle.x, 2) + Math.pow(pos.y - circle.y, 2);
        return distance <= Math.pow(circle.radius, 2);
    };

    GambGame.prototype.clickHander = function clickHander(pos) {

        this.sound.play();

        if (this.phase === 'welcome') {

            if (this.clickInRect(pos, this.continueBtn)) {
                this.phase = 'rateFeeling';
            }
        } else if (this.phase === 'select') {

            var left = { x: 254, y: 384, radius: 200 };
            var right = { x: 762, y: 384, radius: 200 };

            if (this.clickInCircle(pos, left)) {
                this.curSelectedWheel = 0;
                this.phase = 'spinning';
            } else if (this.clickInCircle(pos, right)) {
                this.curSelectedWheel = 1;
                this.phase = 'spinning';
            }
        } else if (this.phase === 'rateFeeling') {
        	if (this.trailIndex == 0){
        		if (this.clickInRect(pos, this.continueBtn)) {
        			this.phase = 'select'
        			this.allResponses.push({ feelingRate: this.feelingString });
        			this.feelingXaxis = this.canvas.width *0.5
        	}
        	} else {
	            if (this.clickInRect(pos, this.continueBtn)) {
	                this.phase = 'end';
	                // Add rating response
	                this.allResponses.push({ feelingRate: this.feelingString });
	            }
	        }
        }

        switch (this.phase) {
            case 'select':
                this.drawWheels(0, 'start');break;
            case 'spinning':
                this.spinWheel('spin');break;
            case 'rateFeeling':
                var arrow = { x: this.feelingXaxis - 15, y: 300, width: 30, height: 40 };
                this.doRating = this.clickInRect(pos, arrow) ? true : false;
                this.rateFeeling();break;
            case 'end':
                this.end();break;
        }
    };

    GambGame.prototype.mouseDown = function mouseDown(ev) {
        var pos = { x: ev.pageX - this.offset.left, y: ev.pageY - this.offset.top };
        // Don't handle click when it is spinning
        if (this.phase !== 'spinning' && this.phase !== 'pause') {
            this.clickHander(pos);
        }
    };

    GambGame.prototype.touchStart = function touchStart() {
        var pos = { x: event.targetTouches[0].pageX - this.offset.left, y: event.targetTouches[0].pageY - this.offset.top };
        // Don't handle click when it is spinning
        if (this.phase !== 'spinning' && this.phase !== 'pause') {
            this.clickHander(pos);
        }
    };

    GambGame.prototype.mouseMove = function mouseMove(ev) {
        var pos = { x: ev.pageX - this.offset.left, y: ev.pageY - this.offset.top };
        this.moveHandler(pos);
    };

    GambGame.prototype.touchMove = function touchMove() {
        var pos = { x: event.targetTouches[0].pageX - this.offset.left, y: event.targetTouches[0].pageY - this.offset.top };
        this.moveHandler(pos);
    };

    GambGame.prototype.moveHandler = function moveHandler(pos) {
        if (this.phase === 'rateFeeling' && this.doRating) {
            if (pos.x > 290 && pos.x < 734) {
                this.feelingXaxis = pos.x;
                this.rateFeeling();
            }
        }
    };

    GambGame.prototype.mouseUp = function mouseUp(ev) {
        this.doRating = false;
    };

    GambGame.prototype.touchEnd = function touchEnd() {
        this.doRating = false;
    };

    GambGame.prototype.end = function end() {
        // increase day
        thisConfig.day++;
        // then only update day
        finishScript(this.allResponses, {
            day: thisConfig.day,
            updateOnly: true // only update the specific variables
        });
    };

    return GambGame;
}();

function runScript() {

    if (typeof thisConfig === 'undefined' || typeof thisConfig.day === 'undefined') {
        thisConfig = { day: 0 };
    }

    var game = new GambGame(global_gamb_config, thisConfig.day);
    imgContinue.onload = function () {
        game.start();
    };
}